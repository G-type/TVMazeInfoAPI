// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TVMazeInfoAPI.Data;

#nullable disable

namespace TVMazeInfoAPI.Migrations
{
    [DbContext(typeof(TVMazeContext))]
    [Migration("20240606155204_AddNewEntities")]
    partial class AddNewEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShowId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShowId");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Runtime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ShowId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode")
                        .IsUnique()
                        .HasFilter("[CountryCode] IS NOT NULL");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ImageId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Average")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Premiered")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NetworkId")
                        .IsUnique()
                        .HasFilter("[NetworkId] IS NOT NULL");

                    b.HasIndex("RatingId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Cast", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Show", null)
                        .WithMany("Cast")
                        .HasForeignKey("ShowId");

                    b.Navigation("Character");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Character", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Crew", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Show", null)
                        .WithMany("Crew")
                        .HasForeignKey("ShowId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Episode", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Show", "Show")
                        .WithMany("Episodes")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Network", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Country", "Country")
                        .WithOne()
                        .HasForeignKey("TVMazeInfoAPI.Domain.Entities.Network", "CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Person", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Country");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Show", b =>
                {
                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Network", "Network")
                        .WithOne()
                        .HasForeignKey("TVMazeInfoAPI.Domain.Entities.Show", "NetworkId");

                    b.HasOne("TVMazeInfoAPI.Domain.Entities.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.Navigation("Image");

                    b.Navigation("Network");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("TVMazeInfoAPI.Domain.Entities.Show", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
